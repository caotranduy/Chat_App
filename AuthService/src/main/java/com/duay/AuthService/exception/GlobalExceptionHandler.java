// English comments as requested
package com.duay.AuthService.exception;

import java.util.List;
import java.util.Set;
//import java.util.Set;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.web.HttpRequestMethodNotSupportedException;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.resource.NoResourceFoundException;

/**
 * Generated by Gemini. Yes, i do give credit to, even, AI because I'm learning -Duay-
 */
@ControllerAdvice // This annotation makes the class a global exception handler.
public class GlobalExceptionHandler {

    private static final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);
 
    /**
     * Handles BadCredentialsException.
     * This is triggered for authentication failures, such as an invalid token,
     * signature, or incorrect password during login.
     * Returns HTTP 401 Unauthorized.
     */
    @ExceptionHandler(BadCredentialsException.class)
    public ResponseEntity<ErrorResponse> handleBadCredentialsException(BadCredentialsException ex, WebRequest request) {
        logger.warn("Authentication Failed: {}", ex.getMessage());
        ErrorResponse errorResponse = new ErrorResponse(
                HttpStatus.UNAUTHORIZED.value(),
                "Authentication Failed: Invalid credentials provided.",
                request.getDescription(false).replace("uri=", "")
        );
        return new ResponseEntity<>(errorResponse, HttpStatus.UNAUTHORIZED);
    }

    // --- Database and Validation Exceptions ---



    /**
     * Handles MethodArgumentNotValidException.
     * Triggered when request body validation with @Valid fails.
     * Returns HTTP 400 Bad Request.
     */
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<ErrorResponse> handleValidationExceptions(MethodArgumentNotValidException ex, WebRequest request) {
        logger.warn("Validation error: {}", ex.getMessage());
        ErrorResponse errorResponse = new ErrorResponse(
                HttpStatus.BAD_REQUEST.value(),
                "Validation failed. Please check your input data.",
                request.getDescription(false).replace("uri=", "")
        );
        List<String> errors = ex.getBindingResult().getFieldErrors().stream()
                .map(error -> error.getField() + ": " + error.getDefaultMessage())
                .collect(Collectors.toList());
        errorResponse.setValidationErrors(errors);
        return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
    }


    /**
     * Handles NoResourceFoundException.
     * Triggered when no handler is found for a request (e.g., wrong URL).
     * Returns HTTP 404 Not Found.
     */
    @ExceptionHandler(NoResourceFoundException.class)
    public ResponseEntity<ErrorResponse> handleNoResourceFoundException(NoResourceFoundException ex, WebRequest request) {
        logger.warn("Endpoint not found: {}", ex.getMessage());
        ErrorResponse errorResponse = new ErrorResponse(
                HttpStatus.NOT_FOUND.value(),
                "The requested API endpoint does not exist.",
                request.getDescription(false).replace("uri=", "")
        );
        return new ResponseEntity<>(errorResponse, HttpStatus.NOT_FOUND);
    }

    /**
     * Handles our custom ResourceNotFoundException.
     * This is triggered when a service method cannot find an entity in the database.
     * Returns HTTP 404 Not Found.
     */
    @ExceptionHandler(ResourceNotFoundException.class) // <-- THIS IS THE NEW HANDLER
    public ResponseEntity<ErrorResponse> handleResourceNotFoundException(ResourceNotFoundException ex, WebRequest request) {
        logger.warn("Resource not found: {}", ex.getMessage());
        ErrorResponse errorResponse = new ErrorResponse(
                HttpStatus.NOT_FOUND.value(),
                ex.getMessage(), // Use the specific message from the exception for better client feedback
                request.getDescription(false).replace("uri=", "")
        );
        return new ResponseEntity<>(errorResponse, HttpStatus.NOT_FOUND);
    }

    /**
     * Handles HttpRequestMethodNotSupportedException.
     * Triggered when a request is made with an HTTP method that is not supported by the endpoint
     * (e.g., sending a POST request to a GET-only endpoint).
     * Returns HTTP 405 METHOD NOT ALLOWED with a helpful message and an 'Allow' header.
     */
    @ExceptionHandler(HttpRequestMethodNotSupportedException.class)
    public ResponseEntity<ErrorResponse> handleHttpRequestMethodNotSupported(
            HttpRequestMethodNotSupportedException ex, WebRequest request) {

        // Get the method that the client incorrectly used
        String actualMethod = ex.getMethod();
        
        // Get the set of HTTP methods that are actually supported for this endpoint
        Set<HttpMethod> supportedMethods = ex.getSupportedHttpMethods();

        // Build a helpful error message string
        String supportedMethodsString = supportedMethods.stream()
                .map(HttpMethod::name)
                .collect(Collectors.joining(", "));
        
        String errorMessage = String.format(
                "Method '%s' is not supported for this request. Supported methods are: [%s]",
                actualMethod,
                supportedMethodsString
        );

        logger.warn("Invalid HTTP method used for {}: {}", request.getDescription(false).replace("uri=", ""), errorMessage);
        
        // Create the response body DTO
        ErrorResponse errorResponse = new ErrorResponse(
                HttpStatus.METHOD_NOT_ALLOWED.value(),
                errorMessage,
                request.getDescription(false).replace("uri=", "")
        );

        // Best Practice: A 405 response SHOULD include the 'Allow' header
        // specifying which methods are allowed.
        HttpHeaders headers = new HttpHeaders();
        headers.setAllow(supportedMethods);

        // Return the response entity with the body, headers, and 405 status code
        return new ResponseEntity<>(errorResponse, headers, HttpStatus.METHOD_NOT_ALLOWED);
    }

    
    /**
     * Handles DataIntegrityViolationException.
     * Triggered by database constraint violations (e.g., unique key violation).
     * Returns HTTP 409 Conflict.
     */
    @ExceptionHandler(DataIntegrityViolationException.class)
    public ResponseEntity<ErrorResponse> handleDataIntegrityViolation(DataIntegrityViolationException ex, WebRequest request) {
        logger.warn("Data integrity violation: {}", ex.getMessage());
        ErrorResponse errorResponse = new ErrorResponse(
                HttpStatus.CONFLICT.value(),
                "A resource with the same unique data already exists. Please check your input.",
                request.getDescription(false).replace("uri=", "")
        );
        return new ResponseEntity<>(errorResponse, HttpStatus.CONFLICT);
    }
    
    // --- Catch-All for any other unhandled exceptions ---
    /**
     * A catch-all handler for any other unhandled exceptions.
     * This prevents leaking stack traces to the client.
     * Returns HTTP 500 Internal Server Error.
     */
    @ExceptionHandler(Exception.class)
    public ResponseEntity<ErrorResponse> handleGlobalException(Exception ex, WebRequest request) {
        logger.error("An unexpected error occurred: {}", ex.getMessage(), ex); // Log the full stack trace
        ErrorResponse errorResponse = new ErrorResponse(
                HttpStatus.INTERNAL_SERVER_ERROR.value(),
                "An unexpected internal server error occurred. Please contact support.",
                request.getDescription(false).replace("uri=", "")
        );
        return new ResponseEntity<>(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR);
    }
}